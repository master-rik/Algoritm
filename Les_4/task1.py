"""
1). Проанализировать скорость и сложность одного любого алгоритма из разработанных в рамках домашнего задания первых
трех уроков.
Примечание. Идеальным решением будет:
● выбрать хорошую задачу, которую имеет смысл оценивать,
● написать 3 варианта кода (один у вас уже есть),
● проанализировать 3 варианта и выбрать оптимальный,
● результаты анализа вставить в виде комментариев в файл с кодом (не забудьте указать, для каких N вы проводили замеры),
● написать общий вывод: какой из трёх вариантов лучше и почему.
"""

"""
Les_2 task_3. Сформировать из введенного числа обратное по порядку входящих
в него цифр и вывести на экран.
Например, если введено число 3486, надо вывести 6843. 

"""

import timeit, cProfile


# Вариант №1

def funk1(n):
    if n == 0:
        return " "  # базовый случай

    if n > 0:
        k = 0
        k = n % 10 + k * 10
        return f"{k}{funk1(n // 10)}"


print(timeit.timeit('funk1(987654321123456789)', number=1000, globals=globals()))                             #0.013111084001138806
print(timeit.timeit('funk1(987654321123456789123456789)', number=1000, globals=globals()))                    #0.02042789396364242
print(timeit.timeit('funk1(987654321123456789123456789123456789)', number=1000, globals=globals()))           #0.02733229601290077
print(timeit.timeit('funk1(987654321123456789123456789123456789123456789)', number=1000, globals=globals()))  #0.02047768991906196

cProfile.run('funk1(987654321123456789123456789123456789123456789)') #  46/1    0.000    0.000    0.000    0.000 task1.py:24(funk1)

# print(funk1(123456789))
print("-" * 32)

# Вариант 2
def funk2(n):
    i = 1
    while n // i > 10:
        i *= 10
    new_n = 0
    point = 1
    while i >= 1:
        new_n += n // i * point
        n -= n // i * i
        point *= 10
        i /= 10
    return int(new_n)


print(timeit.timeit('funk2(987654321123456789)', number=1000, globals=globals()))                             #0.01526381797157228
print(timeit.timeit('funk2(987654321123456789123456789)', number=1000, globals=globals()))                    #0.021718217991292477
print(timeit.timeit('funk2(987654321123456789123456789123456789)', number=1000, globals=globals()))           #0.03068205900490284
print(timeit.timeit('funk2(987654321123456789123456789123456789123456789)', number=1000, globals=globals()))  #0.038654529955238104

cProfile.run('funk2(987654321123456789123456789123456789123456789)') #   1    0.000    0.000    0.000    0.000 task1.py:45(funk2)

# print(funk2(123456789))
print("-" * 32)


# Вариант 3
def funk3(n):
    n = str(n)
    new_n = ''
    index = len(n)
    while index > 0:
        new_n += n[index - 1]
        index -= 1
    return int(new_n)



print(timeit.timeit('funk3(987654321123456789)', number=1000, globals=globals()))                             #0.002956827054731548
print(timeit.timeit('funk3(987654321123456789123456789)', number=1000, globals=globals()))                    #0.005458730040118098
print(timeit.timeit('funk3(987654321123456789123456789123456789)', number=1000, globals=globals()))           #0.005374956992454827
print(timeit.timeit('funk3(987654321123456789123456789123456789123456789)', number=1000, globals=globals()))  #0.0066019350197166204

cProfile.run('funk3(987654321123456789123456789123456789123456789)') #  1    0.000    0.000    0.000    0.000 task1.py:71(funk3)

#print(funk3(123456789))

